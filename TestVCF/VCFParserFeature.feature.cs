// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bio.VCF.Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VCFParserFeature")]
    public partial class VCFParserFeatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "VCFParserFeature.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "VCFParserFeature", "\tIn order to take advantage of information stored in VCF file\r\n\tAs a user\r\n\tI wan" +
                    "t to read variant elements", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parse a VCF file")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("13_328_A73P06X9Q-A73806XBP.merged.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("sample1.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("sample2.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("GHDX29.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("GHDX31.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("GHDX32.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("GHDX33.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("GHDX35.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("GHDX36.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("GHDX37.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("GHDX38.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("GHDX39.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("GHDX40.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("GHDX41.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("empty.vcf", null)]
        [NUnit.Framework.TestCaseAttribute("general.vcf", null)]
        public virtual void ParseAVCFFile(string filePath, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse a VCF file", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given(string.Format("A VCF file, {0}", filePath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I open the file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("count the number of variants in the file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
